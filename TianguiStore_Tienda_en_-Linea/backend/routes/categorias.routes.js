/**
 * üìÅ RUTA: routes/categorias.routes.js
 * üì¶ M√≥dulo: Gesti√≥n de categor√≠as del cat√°logo de productos
 *
 * üîê Todas las rutas est√°n protegidas por autenticaci√≥n JWT.
 * üß† Utiliza el modelo `categoriasModel.js` para operaciones con la base de datos.
 */

const express = require("express");
const router = express.Router();
const categoriasModel = require("../models/categoria.model");


const { verificarAutenticacion } = require("../middlewares/authMiddleware");
const sanitizarEntradas = require("../middlewares/sanitizeAndValidateMiddleware");

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üì• Rutas protegidas ‚Äî requieren JWT v√°lido
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

/**
 * üìã GET /categorias
 * Obtener todas las categor√≠as activas
 */
router.get("/", verificarAutenticacion, async (req, res) => {
  try {
    const categorias = await categoriasModel.obtenerCategoriasActivas();
    res.status(200).json(categorias);
  } catch (error) {
    console.error("‚ùå Error al obtener categor√≠as:", error);
    res.status(500).json({ message: "Error interno al obtener las categor√≠as" });
  }
});

/**
 * üîç GET /categorias/:id
 * Obtener una categor√≠a por su ID
 */
router.get("/:id", verificarAutenticacion, async (req, res) => {
  try {
    const { id } = req.params;

    if (isNaN(id)) {
      return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
    }

    const categoria = await categoriasModel.obtenerCategoriaPorId(id);

    if (!categoria) {
      return res.status(404).json({ message: "Categor√≠a no encontrada" });
    }

    res.status(200).json(categoria);
  } catch (error) {
    console.error("‚ùå Error al obtener categor√≠a por ID:", error);
    res.status(500).json({ message: "Error interno al buscar la categor√≠a" });
  }
});

/**
 * ‚ûï POST /categorias
 * Crear una nueva categor√≠a
 */
router.post("/", verificarAutenticacion, sanitizarEntradas, async (req, res) => {
  try {
    const { nombre_categoria, slug_categoria } = req.body;

    if (!nombre_categoria || !slug_categoria) {
      return res.status(400).json({ message: "Faltan campos obligatorios: nombre y slug" });
    }

    await categoriasModel.insertarCategoria(req.body);
    res.status(201).json({ message: "Categor√≠a creada correctamente" });
  } catch (error) {
    console.error("‚ùå Error al crear categor√≠a:", error);
    res.status(500).json({ message: "Error al crear la categor√≠a" });
  }
});

/**
 * ‚úèÔ∏è PUT /categorias/:id
 * Actualizar una categor√≠a por su ID
 */
router.put("/:id", verificarAutenticacion, sanitizarEntradas, async (req, res) => {
  try {
    const { id } = req.params;

    if (isNaN(id)) {
      return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
    }

    const existe = await categoriasModel.obtenerCategoriaPorId(id);
    if (!existe) {
      return res.status(404).json({ message: "Categor√≠a no encontrada" });
    }

    await categoriasModel.actualizarCategoria(id, req.body);
    res.status(200).json({ message: "Categor√≠a actualizada correctamente" });
  } catch (error) {
    console.error("‚ùå Error al actualizar categor√≠a:", error);
    res.status(500).json({ message: "Error al actualizar la categor√≠a" });
  }
});

/**
 * üóëÔ∏è DELETE /categorias/:id
 * Borrado l√≥gico: cambia el estado a 'inactiva'
 */
router.delete("/:id", verificarAutenticacion, async (req, res) => {
  try {
    const { id } = req.params;

    if (isNaN(id)) {
      return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
    }

    const categoria = await categoriasModel.obtenerCategoriaPorId(id);
    if (!categoria) {
      return res.status(404).json({ message: "Categor√≠a no encontrada" });
    }

    await categoriasModel.desactivarCategoria(id);
    res.status(200).json({ message: "Categor√≠a eliminada correctamente" });
  } catch (error) {
    console.error("‚ùå Error al eliminar categor√≠a:", error);
    res.status(500).json({ message: "Error al eliminar la categor√≠a" });
  }
});

module.exports = router;
